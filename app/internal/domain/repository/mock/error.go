// Code generated by MockGen. DO NOT EDIT.
// Source: error.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockErrorRepository is a mock of ErrorRepository interface.
type MockErrorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockErrorRepositoryMockRecorder
}

// MockErrorRepositoryMockRecorder is the mock recorder for MockErrorRepository.
type MockErrorRepositoryMockRecorder struct {
	mock *MockErrorRepository
}

// NewMockErrorRepository creates a new mock instance.
func NewMockErrorRepository(ctrl *gomock.Controller) *MockErrorRepository {
	mock := &MockErrorRepository{ctrl: ctrl}
	mock.recorder = &MockErrorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorRepository) EXPECT() *MockErrorRepositoryMockRecorder {
	return m.recorder
}

// ErrThreadNotFound mocks base method.
func (m *MockErrorRepository) ErrThreadNotFound(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrThreadNotFound", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ErrThreadNotFound indicates an expected call of ErrThreadNotFound.
func (mr *MockErrorRepositoryMockRecorder) ErrThreadNotFound(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrThreadNotFound", reflect.TypeOf((*MockErrorRepository)(nil).ErrThreadNotFound), err)
}

// ErrUserNotFound mocks base method.
func (m *MockErrorRepository) ErrUserNotFound(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrUserNotFound", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ErrUserNotFound indicates an expected call of ErrUserNotFound.
func (mr *MockErrorRepositoryMockRecorder) ErrUserNotFound(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrUserNotFound", reflect.TypeOf((*MockErrorRepository)(nil).ErrUserNotFound), err)
}
